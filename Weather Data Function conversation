ME: 
    My focus is weather data functions. The function is asking to define get_weather_data() 
    - how would you recommend I go about this if I want to go with option 1?

AI: 
    Since you're working with Option 1 (using the fetch-my-weather package), we‚Äôll build a clean, working get_weather_data() function that:
    
    Retrieves the weather data using get_weather()
    
    Is easy for you to understand and expand later
    
    Can be reused throughout your program (like in display, test, or UI sections)
    
    ‚úÖ Your get_weather_data() Function
    Here‚Äôs a recommended version with full comments:
    
    python
    Copy code
    # =============================================================================
    # 3. WEATHER DATA FUNCTIONS
    # =============================================================================
    
    def get_weather_data(city="Perth", forecast_days=3):
        """
        Fetches weather data for a given city using fetch-my-weather.
    
        Args:
            city (str): City name to fetch the weather for.
            forecast_days (int): Number of forecast days (1‚Äì5).
    
        Returns:
            dict: A dictionary containing current temperature and weather condition.
                  Returns an error message if the request fails.
        """
        try:
            # Fetch raw weather data using the helper package
            weather = get_weather(city, forecast_days)
    
            # Extract just the current condition
            current = weather["current_condition"]
            return {
                "city": city,
                "temperature_C": current["temp_C"],
                "condition": current["weatherDesc"][0]["value"]
            }
    
        except Exception as e:
            return {
                "error": f"Unable to fetch weather data: {str(e)}"
            }
    üîç Example Output
    If you call:
    
    python
    Copy code
    get_weather_data("Sydney", 3)
    You might get:
    
    python
    Copy code
    {
      'city': 'Sydney',
      'temperature_C': '22',
      'condition': 'Partly cloudy'
    }
    Or on error:
    
    python
    Copy code
    {
      'error': 'Unable to fetch weather data: HTTP 403 Forbidden'
    }
    üß™ Test It
    You can try testing it directly like this:
    
    python
    Copy code
    result = get_weather_data("Melbourne", 3)
    print(result)
    If that prints out a clean dictionary with weather info, then you're ready to move on to the display and UI parts.



ME:
    I'm not seeing any results with a dictionary or weather information. It's coming up with a white-text error that says "string indices must be integers, not 'str'" - What does this mean?


AI:
    You‚Äôve caught a common and teachable beginner error. The error:
    
    string indices must be integers, not 'str'
    
    means you're trying to treat a string like a dictionary ‚Äî by using some_string['key'], which only works on dictionaries.
    
    üß† What‚Äôs Going Wrong?
    Your function has this line (or similar):
    
    python
    Copy code
    current = weather["current_condition"]
    But if weather is actually a string (not a dictionary), Python will throw that error because it's trying to do:
    
    python
    Copy code
    "some string here"["current_condition"]  # ‚ùå invalid
    ‚úÖ Fixing It Step-by-Step
    Let‚Äôs debug this with a print:
    
    üîç Add a Debug Print
    In your function, temporarily add this line to see what weather actually contains:
    
    python
    Copy code
    print("RAW weather data:", weather)
    Put it right after this line:
    
    python
    Copy code
    weather = get_weather(city, forecast_days)
    So your function looks like this:
    
    python
    Copy code
    def get_weather_data(city="Perth", forecast_days=3):
        try:
            weather = get_weather(city, forecast_days)
            print("RAW weather data:", weather)  # üëà Debug print
    
            current = weather["current_condition"]
            return {
                "city": city,
                "temperature_C": current["temp_C"],
                "condition": current["weatherDesc"][0]["value"]
            }
    
        except Exception as e:
            return {
                "error": f"Unable to fetch weather data: {str(e)}"
            }
    Now rerun the function, e.g.:
    
    python
    Copy code
    get_weather_data("Perth", 3)
    üîç What You Might See
    If the output is a big JSON/dictionary ‚Üí You're fine; the bug may be later.
    
    If the output is a string (like "Could not get weather" or HTML) ‚Üí That‚Äôs the problem.
    
    ‚úÖ Likely Solution
    The fetch-my-weather package should return a dictionary like:
    
    python
    Copy code
    {
      "current_condition": {...},
      "weather": [...],
      ...
    }
    But if you don‚Äôt have internet, or the API fails silently, get_weather() may return a string like an error message.
    
    üëâ Fix:
    Wrap the data check like this:
    
    python
    Copy code
    if isinstance(weather, dict) and "current_condition" in weather:
        current = weather["current_condition"]
        return {
            "city": city,
            "temperature_C": current["temp_C"],
            "condition": current["weatherDesc"][0]["value"]
        }
    else:
        return {
            "error": f"Unexpected response format: {weather}"
        }



ME:
    I've edited the function, but when I call it, it appears with the error below:
    RAW weather data: Error: Invalid 'units' parameter. Use 'm', 'u', or 'M'.
    {'error': "Unexpected response format: Error: Invalid 'units' parameter. Use 'm', 'u', or 'M'."}


AI:
        Thank you! That error tells us exactly what's wrong:
        
        Error: Invalid 'units' parameter. Use 'm', 'u', or 'M'.
        
        This means your call to get_weather() is missing or incorrectly formatting the units argument.
        
        ‚úÖ Fix: Add the "units" Parameter
        The fetch-my-weather package (a wrapper for wttr.in) expects a valid units code:
        
        Code	Meaning
        'm'	Metric (Celsius)
        'u'	US (Fahrenheit)
        'M'	Mixed
        
        üîß Update your function like this:
        python
        Copy code
        def get_weather_data(city="Perth", forecast_days=3, units="m"):
            """
            Safely fetches weather data using fetch-my-weather.
        
            Args:
                city (str): City name to fetch the weather for.
                forecast_days (int): Number of forecast days (1‚Äì5).
                units (str): Units for temperature - 'm' (Celsius), 'u' (Fahrenheit), or 'M' (mixed).
        
            Returns:
                dict: Summary weather info or error.
            """
            try:
                weather = get_weather(city, forecast_days, units)
                print("RAW weather data:", weather)  # Debug
        
                if isinstance(weather, dict) and "current_condition" in weather:
                    current = weather["current_condition"]
                    return {
                        "city": city,
                        "temperature_C": current["temp_C"],
                        "condition": current["weatherDesc"][0]["value"]
                    }
                else:
                    return {
                        "error": f"Unexpected response format: {weather}"
                    }
        
            except Exception as e:
                return {
                    "error": f"Unable to fetch weather data: {str(e)}"
                }



ME: It's still showing the same error. Even if I remove the units line in the function, its showing the exact same issue?


AI:

        Thanks for confirming ‚Äî now we definitely know that the issue is:
        
        fetch_my_weather.get_weather() doesn‚Äôt accept a forecast_days or units argument.
        
        Despite what seemed like available options, the actual function signature is likely just:
        
        python
        Copy code
        get_weather(city: str)
        That means the version of fetch-my-weather you installed is only for current conditions, not extended forecasts or unit changes.
        
        ‚úÖ Final Working Version
        Let's fix your function accordingly:
        
        python
        Copy code
        def get_weather_data(city="Perth"):
            """
            Fetches current weather data for a city using fetch-my-weather.
        
            Args:
                city (str): Name of the city
        
            Returns:
                dict: Current temperature and condition, or error message
            """
            try:
                weather = get_weather(city)
                print("RAW weather data:", weather)  # Debug: inspect full return
        
                if isinstance(weather, dict) and "current_condition" in weather:
                    current = weather["current_condition"]
                    return {
                        "city": city,
                        "temperature_C": current["temp_C"],
                        "condition": current["weatherDesc"][0]["value"]
                    }
                else:
                    return {
                        "error": f"Unexpected response format: {weather}"
                    }
        
            except Exception as e:
                return {
                    "error": f"Unable to fetch weather data: {str(e)}"
                }
        üß™ Test It Like This:
        python
        Copy code
        result = get_weather_data("Sydney")
        print(result)
        üß† What Changed?
        Before	Now
        Passed forecast_days, units	Removed all extra arguments
        Expected a full forecast	Now only uses current conditions
        Broke on unit formatting


ME: However my project requirements need to display the current weather conditions as well as forecasts. Where else could the error be coming from?


AI:
        üîç The Core Issue
        You're using the fetch-my-weather package, but it‚Äôs giving you this error:
        
        Error: Invalid 'units' parameter. Use 'm', 'u', or 'M'.
        
        That error comes not from your code directly, but from wttr.in, which means:
        
        üî• fetch-my-weather is passing a broken request to wttr.in.
        This suggests one of two things:
        
        You're using the wrong function signature (e.g., wrong number of parameters)
        
        The package version is outdated or buggy
        
        Or both
        
        ‚úÖ Confirming the Real Function Signature
        Let‚Äôs manually check the signature. Try running this cell to inspect the function:
        
        python
        Copy code
        import inspect
        print(inspect.signature(get_weather))
        It will show you something like:
        
        python
        Copy code
        (city: str) -> dict
        or:
        
        python
        Copy code
        (city: str, days: int) -> dict
        If it only accepts one argument, then you're not able to get a forecast using this package at all ‚Äî only current weather.
        
        ‚úÖ Best Path Forward: Switch to Option 2 (Direct wttr.in API)
        The direct wttr.in API does return both current weather and forecast data in one JSON response:
        
        plaintext
        Copy code
        https://wttr.in/Sydney?format=j1
        This gives:
        
        "current_condition" ‚Äì for current weather
        
        "weather" ‚Äì list of daily forecasts (e.g., 3‚Äì5 days)
        


ME: Ok I'll switch to Option 2. Do I need to change any imports? And can you provide a starting off function, and give an overview of its actions?


AI:
        ‚úÖ Step-by-Step Structure for Option 2
        Here‚Äôs a simple structure that fits your assignment sections and is easy to understand.
        
        üîπ 1. Setup & Imports
        python
        Copy
        Edit
        import requests
        You don‚Äôt need fetch-my-weather anymore for Option 2.
        
        üîπ 2. Weather Data Functions
        This is where you‚Äôll define your main function for fetching data from wttr.in.
        
        python
        Copy
        Edit
        def get_weather_data(city="Perth", forecast_days=3):
            """
            Fetch current weather and forecast using wttr.in API.
        
            Args:
                city (str): City name
                forecast_days (int): Number of forecast days to include (1‚Äì3)
        
            Returns:
                dict: Weather information or error
            """
            try:
                # Send request to wttr.in
                url = f"https://wttr.in/{city}?format=j1"
                response = requests.get(url)
                data = response.json()
        
                # Extract current conditions
                current = data["current_condition"][0]
                weather_now = {
                    "temp_C": current["temp_C"],
                    "condition": current["weatherDesc"][0]["value"]
                }
        
                # Extract forecast for given days (limit to 3)
                forecast_data = []
                for day in data["weather"][:forecast_days]:
                    forecast_data.append({
                        "date": day["date"],
                        "min_temp_C": day["mintempC"],
                        "max_temp_C": day["maxtempC"],
                        "condition": day["hourly"][4]["weatherDesc"][0]["value"]  # around midday
                    })
        
                return {
                    "city": city,
                    "current": weather_now,
                    "forecast": forecast_data
                }
        
            except Exception as e:
                return {
                    "error": f"Failed to fetch weather: {str(e)}"
                }
        üîπ 3. Testing and Example
        Call your function in a separate cell:
        
        python
        Copy
        Edit
        result = get_weather_data("Sydney", 3)
        print(result)
        üìå Summary of What This Does:
        Makes a GET request to wttr.in
        
        Extracts:
        
        Current temperature and condition
        
        Forecast for the next 1‚Äì3 days (date, min/max temp, and midday condition)
        
        Returns a clean dictionary structure
        
        Handles errors gracefully



ME: The code has now worked! But my setup and configuration didn't actually change, I already had 'import requests' and didn't bother deleting the 'fetch-my-weather' package when we switched to option 2. 
    That means something was causing an error in the weather data functions code we were working on. What causes the error if no changes were made to the import and configuration section?


AI:
        ‚úÖ The Real Cause of the Error Was in the Weather Data Function Code, Not the Imports
        Let‚Äôs break it down:
        
        ‚ùå The Old Code (Option 1: fetch-my-weather) Was Causing the Error
        In the earlier version using fetch-my-weather, the line:
        
        python
        Copy
        Edit
        weather = get_weather(city, forecast_days)
        was trying to pass an argument (forecast_days) that the fetch-my-weather package didn't support.
        
        That resulted in an error coming from the wttr.in backend, forwarded through the package:
        
        Error: Invalid 'units' parameter. Use 'm', 'u', or 'M'.
        
        This is a sign that the library was misusing the API behind the scenes due to incorrect input, and not gracefully rejecting the extra parameter.
        
        ‚úÖ When You Switched to requests + Direct wttr.in API
        The function:
        
        python
        Copy
        Edit
        response = requests.get(f"https://wttr.in/{city}?format=j1")
        worked fine because:
        
        You were directly accessing the real API with the expected format.
        
        You had full control of how to structure the request and parse the response.
        
        There was no extra middleware (like a library) modifying or mishandling the request.


ME: Can you help me breakdown each line of the code in the new weather data functions code? 
There's a lot going on. Can you help any terms and breakdown in easy to understand language? 


AI:
        Absolutely ‚Äî let‚Äôs break down your working get_weather_data() function step-by-step in clear, beginner-friendly language. I‚Äôll explain every line and term, so you really understand what‚Äôs happening under the hood.
        
        üß© Full Function (from earlier):
        python
        Copy
        Edit
        def get_weather_data(city="Perth", forecast_days=3):
            """
            Fetch current weather and forecast using wttr.in API.
        
            Args:
                city (str): City name
                forecast_days (int): Number of forecast days to include (1‚Äì3)
        
            Returns:
                dict: Weather information or error
            """
            try:
                url = f"https://wttr.in/{city}?format=j1"
                response = requests.get(url)
                data = response.json()
        
                current = data["current_condition"][0]
                weather_now = {
                    "temp_C": current["temp_C"],
                    "condition": current["weatherDesc"][0]["value"]
                }
        
                forecast_data = []
                for day in data["weather"][:forecast_days]:
                    forecast_data.append({
                        "date": day["date"],
                        "min_temp_C": day["mintempC"],
                        "max_temp_C": day["maxtempC"],
                        "condition": day["hourly"][4]["weatherDesc"][0]["value"]
                    })
        
                return {
                    "city": city,
                    "current": weather_now,
                    "forecast": forecast_data
                }
        
            except Exception as e:
                return {
                    "error": f"Failed to fetch weather: {str(e)}"
                }
        ü™Ñ Line-by-Line Explanation (In Simple Terms)
        üîπ def get_weather_data(city="Perth", forecast_days=3):
        What it does:
        Defines a new function called get_weather_data.
        You can give it a city (e.g., "Sydney") and how many days of forecast you want (1 to 3).
        
        city="Perth": If you don't provide a city, it will default to "Perth".
        
        forecast_days=3: Defaults to a 3-day forecast.
        
        üîπ try:
        Starts a block of code that will catch errors if anything goes wrong (like bad internet or wrong data). Helps prevent the app from crashing.
        
        üîπ url = f"https://wttr.in/{city}?format=j1"
        What it does:
        Builds the URL string for the weather website.
        {city} puts the city you asked for into the URL.
        format=j1 tells wttr.in to give you JSON, which is structured data Python can read.
        
        üîπ response = requests.get(url)
        What it does:
        Sends a request to the website and stores the reply in a variable called response.
        
        üîπ data = response.json()
        What it does:
        Converts the reply from the website (which is text) into a Python dictionary using .json(), so you can work with it like a normal variable.
        
        üîπ current = data["current_condition"][0]
        What it does:
        Pulls out the current weather from the data.
        
        data["current_condition"] is a list (like a box with one item)
        
        [0] grabs the first (and only) item from that list
        
        üîπ weather_now = { "temp_C": ..., "condition": ... }
        What it does:
        Makes a new dictionary to store just the current weather ‚Äî temperature and description like "Sunny" or "Cloudy".
        
        current["temp_C"]: Temperature in Celsius
        
        current["weatherDesc"][0]["value"]: The text description of the weather (e.g., "Partly cloudy")
        
        üîπ forecast_data = []
        Creates an empty list to hold each day‚Äôs forecast data.
        
        üîπ for day in data["weather"][:forecast_days]:
        This is a loop that goes through the forecast for the number of days you asked for.
        
        data["weather"] is a list of daily forecasts (usually 3 days)
        
        [:forecast_days] only looks at the number of days you wanted (e.g., first 3)
        
        üîπ forecast_data.append({ ... })
        Adds a new dictionary for each forecast day with:
        
        Date
        
        Minimum and maximum temperature
        
        Midday condition (from hourly data ‚Äî hourly[4] is around noon)
        
        üîπ return { "city": ..., "current": ..., "forecast": ... }
        Returns everything we collected ‚Äî a big dictionary with:
        
        The city name
        
        Current weather
        
        A list of daily forecasts
        
        You can now use or print this info wherever you want.
        
        üîπ except Exception as e: return { "error": ... }
        If anything goes wrong, this catches the error and returns a helpful message. That way, your program doesn‚Äôt crash.
        
        ‚úÖ Example Output
        If you call:
        
        python
        Copy
        Edit
        print(get_weather_data("Sydney"))
        You might see something like:
        
        python
        Copy
        Edit
        {
          "city": "Sydney",
          "current": {
            "temp_C": "21",
            "condition": "Partly cloudy"
          },
          "forecast": [
            {
              "date": "2025-05-27",
              "min_temp_C": "13",
              "max_temp_C": "24",
              "condition": "Sunny"
            },
            ...
          ]
        }


ME: Does the curly brackets have to be so spaced out like that?


AI:
        No, the curly brackets {} don‚Äôt need to be spaced out like that ‚Äî it‚Äôs purely a matter of style and readability.
        
        ‚úÖ Here's what you need to know:
        1. Python accepts both styles:
        These two are exactly the same in functionality:
        
        Spaced/Expanded style (good for beginners):
        
        python
        Copy
        Edit
        weather_now = {
            "temp_C": current["temp_C"],
            "condition": current["weatherDesc"][0]["value"]
        }
        Compact style (more common among experienced devs for short data):
        
        python
        Copy
        Edit
        weather_now = {"temp_C": current["temp_C"], "condition": current["weatherDesc"][0]["value"]}
        üéØ So which should you use?
        Style	When to Use It	Why
        Expanded	When your dictionary has more than 1‚Äì2 key/value pairs	Easier to read, especially for beginners
        Compact	For very short dictionaries (1‚Äì2 items)	Saves space, okay once you're more confident
        
        ‚úèÔ∏è In your assignment:
        Stick to the spaced/expanded version for now ‚Äî it keeps things clean and easy to debug or comment on, especially when:
        
        You're returning complex data (like forecasts)
        
        You want to stay clear and meet assignment readability expectations
        


ME: I also have this piece of code suggested earlier that I edited for the same section, could you give me some thoughts on it and if I could incorporate any aspects in our previous code? Or if nothing is worth adding from it? 
        
        def get_weather_data(city="Perth", forecast_days=3):
            try:
                # Try to fetch weather data from the service
                weather_data = get_weather(city, forecast_days)
        
                # Extract current conditions and forecast
                current = weather_data.get("current_conditions", {})
                forecast = weather_data.get("forecast", [])
        
                # Print current temperature (if available)
                if "temperature" in current:
                    print(f"\nüìç Weather for {city}")
                    print(f"üå°Ô∏è Current Temperature: {current['temperature']}¬∞C")
                else:
                    print(f"\n‚ö†Ô∏è No temperature data found for {city}.")
        
                # Print a simple temperature forecast
                if forecast:
                    print("\nüìÖ Temperature Forecast:")
                    for day in forecast:
                        date = day.get("date", "Unknown date")
                        temp = day.get("temperature", "N/A")
                        print(f"  ‚Ä¢ {date}: {temp}¬∞C")
                else:
                    print("‚ö†Ô∏è No forecast data available.")
        
            except Exception as e:
                # Print an error message if anything goes wrong
                print(f"\n‚ùå Error retrieving weather data for '{city}': {e}")
        


AI:
        Let‚Äôs break it down and compare your get_weather_data() from Option 1 (using fetch-my-weather) with the working one from Option 2 (using wttr.in directly via requests). Then I‚Äôll show you what‚Äôs worth keeping, and what‚Äôs best to avoid.
        
        üîç Key Observations on Your Option 1 Code
        python
        Copy
        Edit
        def get_weather_data(city="Perth", forecast_days=3):
            try:
                weather_data = get_weather(city, forecast_days)
                current = weather_data.get("current_conditions", {})
                forecast = weather_data.get("forecast", [])
        ‚úÖ Pros:
        Uses .get() to safely extract dictionary values (prevents crash if key is missing).
        
        Includes friendly print messages with emojis ‚Äì makes output nicer for CLI.
        
        Handles both current and forecast conditions gracefully.
        
        Provides clear error messages if something goes wrong.
        
        ‚ùå Cons:
        Relies on get_weather() from the fetch-my-weather package, which doesn't meet the assignment requirement of displaying both current and forecast (we discovered this earlier).
        
        Doesn‚Äôt return any data ‚Äî it only prints it. This makes the function harder to reuse in visualisation, UI, or testing.
        
        Forecast temperatures are overly simplified as just "temperature", while wttr.in gives you mintempC, maxtempC, etc.
        
        ‚úÖ What You Can Reuse in Option 2 (direct API) Version
        Here are the good ideas you can incorporate into the version that actually works (Option 2):
        
        Idea from Option 1	How to Reuse It in Option 2
        Use .get()	Helps avoid KeyErrors when accessing data
        Emoji labels and friendly output	Make CLI output nicer for users
        Clean error handling	Already used in Option 2, good practice
        Optional: print sample weather inline	Can be useful for user feedback
        
        üõ†Ô∏è A Clean Hybrid Example (Updated Option 2 with Good Ideas)
        python
        Copy
        Edit
        def get_weather_data(city="Perth", forecast_days=3):
            """
            Retrieves and prints weather info using wttr.in API.
            """
            try:
                url = f"https://wttr.in/{city}?format=j1"
                response = requests.get(url)
                data = response.json()
        
                current = data.get("current_condition", [{}])[0]
                weather_now = {
                    "temp_C": current.get("temp_C", "N/A"),
                    "condition": current.get("weatherDesc", [{}])[0].get("value", "Unknown")
                }
        
                print(f"\nüìç Weather for {city}")
                print(f"üå°Ô∏è Current Temperature: {weather_now['temp_C']}¬∞C")
                print(f"‚õÖ Condition: {weather_now['condition']}")
        
                forecast_data = []
                weather_days = data.get("weather", [])[:forecast_days]
        
                if weather_days:
                    print("\nüìÖ Temperature Forecast:")
                    for day in weather_days:
                        forecast = {
                            "date": day.get("date", "Unknown"),
                            "min_temp_C": day.get("mintempC", "N/A"),
                            "max_temp_C": day.get("maxtempC", "N/A"),
                            "condition": day.get("hourly", [{}])[4].get("weatherDesc", [{}])[0].get("value", "Unknown")
                        }
                        forecast_data.append(forecast)
                        print(f"  ‚Ä¢ {forecast['date']}: {forecast['min_temp_C']}¬∞C ‚Äì {forecast['max_temp_C']}¬∞C, {forecast['condition']}")
                else:
                    print("‚ö†Ô∏è No forecast data available.")
        
                return {
                    "city": city,
                    "current": weather_now,
                    "forecast": forecast_data
                }
        
            except Exception as e:
                print(f"\n‚ùå Error retrieving weather data for '{city}': {e}")
                return {"error": str(e)}
        


[CONVERSATION SECTION OMITTED: Asking AI to help breakdown the function structure more clearly for me to understand]


ME: So whenever I try to call the function with a number more than three, it doesn't give me forecast days for more than 3 days even if I input '4' or '5'. No error is coming up though. Even if I change the forecast days integer to 5 in the "def get_weather_data(city="Perth", forecast_days=3):" line, the results when called only gives a maximum of 3 forecast days. If I change the call function to have 1 or 2, it will show 1 or 2. So its only if the number is more than 4.


AI:
        Great observation ‚Äî you're not doing anything wrong here! This behavior actually comes from the wttr.in API itself, not your code.
        
        ‚úÖ What‚Äôs happening?
        The https://wttr.in/?format=j1 API only provides up to 3 days of forecast data, regardless of what number you request.
        
        So when you run this:
        
        python
        Copy
        Edit
        get_weather_data("Sydney", 5)
        The API still only returns 3 forecast days, because that's all it supports.
        
        üß™ Proof
        If you open this in your browser:
        
        perl
        Copy
        Edit
        https://wttr.in/Sydney?format=j1
        And scroll through the JSON, you‚Äôll see that under the "weather" key, there are only 3 entries:
        
        json
        Copy
        Edit
        "weather": [
          { ... },  // Day 1
          { ... },  // Day 2
          { ... }   // Day 3
        ]
        ‚úÖ What to do about it?
        You don't need to change anything in your code. But you can add a message to inform users that only 3 days are supported. Here's a small addition:
        
        python
        Copy
        Edit
        if forecast_days > 3:
            print("‚ö†Ô∏è Note: Only up to 3 days of forecast are available from wttr.in.")
        This can go just after the function starts, like this:
        
        python
        Copy
        Edit
        def get_weather_data(city="Perth", forecast_days=3):
            if forecast_days > 3:
                print("‚ö†Ô∏è Note: Only up to 3 days of forecast are available from wttr.in.")
            try:
                ...
